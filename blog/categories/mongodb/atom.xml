<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongoDB | Andreas Arledal]]></title>
  <link href="http://andreasarledal.github.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://andreasarledal.github.com/"/>
  <updated>2012-01-15T12:12:19+01:00</updated>
  <id>http://andreasarledal.github.com/</id>
  <author>
    <name><![CDATA[Andreas Arledal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails mongoDB - Collections of DBRefs inside an Embedded Collection]]></title>
    <link href="http://andreasarledal.github.com/blog/2011/11/15/grails-mongodb---collections-of-dbrefs-inside-an-embedded-collection/"/>
    <updated>2011-11-15T09:39:00+01:00</updated>
    <id>http://andreasarledal.github.com/blog/2011/11/15/grails-mongodb---collections-of-dbrefs-inside-an-embedded-collection</id>
    <content type="html"><![CDATA[<p>I'm working on a project where we're migrating from MySQL to mongoDB. One of the reasons for the switch is that the use of embedded collections will simplify our model and make it more efficient. The official mongodb-plugin (1.0.0.RC1) has some problems before it will be ready for production though. One of the problems is that having an embedded collection referencing another collection isn't possible with GORM (<a href="http://jira.grails.org/browse/GPMONGODB-92" title="Associations in an embedded instance should not be forcibly embedded as well">GPMONGODB-92</a>). The workaround is to use the Low-level API instead of GORM. Here's a simple example where a building has many offices and the offices has companies, but the companies need to be in an own collection since we need the possibility to query them specificaly.</p>

<!--more-->


<p><em>Only tested with Grails 2.0.0.RC1 and mongodb plugin 1.0.0.RC1</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Person  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.transform.EqualsAndHashCode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.bson.types.ObjectId</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;@EqualsAndHashCode</span>
</span><span class='line'><span class="s">class Building implements Serializable {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">static</span> <span class="n">mapWith</span> <span class="o">=</span> <span class="s1">&#39;mongo&#39;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;  static embedded = [&#39;offices&#39;]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ObjectId</span> <span class="n">id</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Office</span><span class="o">&gt;</span> <span class="n">offices</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Office  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.transform.EqualsAndHashCode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBRef</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;@EqualsAndHashCode</span>
</span><span class='line'><span class="s">class Office implements Serializable {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">DBRef</span><span class="o">&gt;</span> <span class="n">companies</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Company  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.transform.EqualsAndHashCode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.bson.types.ObjectId</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;@EqualsAndHashCode</span>
</span><span class='line'><span class="s">class Company implements Serializable {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">static</span> <span class="n">mapWith</span> <span class="o">=</span> <span class="s1">&#39;mongo&#39;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;  ObjectId id</span>
</span><span class='line'><span class="s">  String name&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testscript  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.DBRef</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.gmongo.GMongo</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def mongo = new GMongo(&quot;127.0.0.1&quot;, 27017)</span>
</span><span class='line'><span class="s">// Get a db reference in the old fashion way. Could use def mongo inside of a controller or service.</span>
</span><span class='line'><span class="s">def db = mongo.getDB(&quot;foo&quot;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Create a building</span>
</span><span class='line'><span class="kt">def</span> <span class="n">building</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Building</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&quot;Stockholm business centre&quot;</span><span class="o">,</span> <span class="nl">offices:</span> <span class="o">[]).</span><span class="na">save</span><span class="o">()&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// Add someone elses office</span>
</span><span class='line'><span class="s">building.offices &amp;lt;&amp;lt; new Office(name: &quot;Bill Gates not so cool workplace&quot;, companies: [])</span>
</span><span class='line'><span class="s">// Add my office</span>
</span><span class='line'><span class="s">building.offices &amp;lt;&amp;lt; new Office(name: &quot;Andreas awesome workplace&quot;, companies: [])</span>
</span><span class='line'><span class="s">building.save(flush: true)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Create a company</span>
</span><span class='line'><span class="kt">def</span> <span class="n">company</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Company</span><span class="o">(</span><span class="nl">name:</span> <span class="s2">&quot;Andreas inc&quot;</span><span class="o">).</span><span class="na">save</span><span class="o">()</span>
</span><span class='line'><span class="c1">// Get the reference</span>
</span><span class='line'><span class="kt">def</span> <span class="n">companyRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DBRef</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="s2">&quot;company&quot;</span><span class="o">,</span> <span class="n">company</span><span class="o">.</span><span class="na">id</span><span class="o">)&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// Add company to office.</span>
</span><span class='line'><span class="s">Building.collection.update([&#39;_id&#39;: building.id, &#39;offices.name&#39;: &#39;Andreas awesome workplace&#39;], [$set: [&#39;offices.$.companies&#39;: [companyRef]]])&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// QUERYING&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Since the embedded collection doesn&#39;t have an identifier, find it&#39;s index in the list.</span>
</span><span class='line'><span class="kt">def</span> <span class="n">myOfficeIndex</span> <span class="o">=</span> <span class="n">building</span><span class="o">.</span><span class="na">offices</span><span class="o">.</span><span class="na">findIndexOf</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s2">&quot;Andreas&#39;s awesome workplace&quot;</span><span class="o">}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// The DBRef isn&#39;t available in GORM even though it&#39;s persisted</span>
</span><span class='line'><span class="s">assert building.offices[myOfficeIndex].companies == []&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Finding companies through the embedded collection using low level api.</span>
</span><span class='line'><span class="kt">def</span> <span class="n">myOfficeCompanies</span> <span class="o">=</span> <span class="n">Building</span><span class="o">.</span><span class="na">collection</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="s1">&#39;_id&#39;</span><span class="o">:</span> <span class="n">building</span><span class="o">.</span><span class="na">id</span><span class="o">).</span><span class="na">offices</span><span class="o">[</span><span class="n">myOfficeIndex</span><span class="o">].</span><span class="na">companies</span>
</span><span class='line'><span class="k">assert</span> <span class="n">company</span><span class="o">.</span><span class="na">id</span> <span class="k">in</span> <span class="n">myOfficeCompanies</span><span class="o">*.</span><span class="na">id</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
